Objective: learn about multi-threaded programming and locking shared variables. For this exercise you can re-use some parts of your assignment 3 and 4 implementation. 

Write a simple multithreaded C program named thread_manager.c . Your program has two threads in which one thread creates a dynamic object of type THREADDATA (using malloc) and assigns it to pointer  p. Then the second thread deallocates it. This THREADDATA object stores the thread who was the creator of the object. You may use this template code.

You need to protect as a critical section the allocation of memory to p. Checking if p is NULL should tell you if it has been malloc'ed yet. If thread 1 after checking the value of p being NULL is interrupted just before calling malloc by thread 2 (that also checked the value of p), then thread 2 would also find it to be NULL and hence allocates some memory to p. When thread 1 is back, it would allocate more memory to p and we have memory leaking as we didn't assume that both threads would allocate memory and the allocation by thread 2 is forgotten.

You also need to protect as a critical section the deallocation of p. If the thread doing the deallocation is interrupted after the deallocation but before setting p=NULL, then the other thread might try to do work with a non-NULL p and crash the program.

Thread 1 should read lines from the user from stdin and save each line in a new node of the linked list (you can re-use your linked list implementation from assignments 3 and 4). The command to read lines from stdin is (no parsing or exec is needed, just save each line in a node of the linked list, you can assume each line is at most 20 characters):

   fgets(buf,100,stdin);

You can continue reading lines until the user presses Ctrl+C or enters an empty line.

Thread 2 prints the content of the first node in the linked list when its content changes (i.e., a new line was input from user). You should also protect as a critical section the reading and updating of the first node in the linked list (from T2 and T1), or else T2 could access an invalid pointer. Thread 2 exits when the thread 1 that reads the lines is complete. T2 could do this in a while loop where it checks the is_reading_complete flag to know when to stop.

Each thread should print messages to stdout describing what it is doing at each step. Each message printed to stdout should be prefixed with a log index, thread index, PID, and date and time (you may check the sample time.c provided). The log index gets incremented for each message printed to stdout. An example of a typical message: "Logindex 1, thread 2, PID 5435, 21/04/2020 09:23:25 pm:  Head of linked list contains line foo".

You need to share the incrementing log index between the two threads, similar to how they shared THREADDATA. You also need to protect as a critical section the parts where the two threads read and update (increment) the log message index. You can do this similar to the protection you implemented for allocating and deallocating p of type THREADDATA.

When you use shared memory (a shared object) it is important to use mutex locking, such that the two threads don't write/increment the log index at the same time; as well as to prevent one thread reading before the other has completed writing (updating) the index.

You can compile your code with:

gcc -D_REENTRANT -pthread -o thread_manager thread_manager.c

You can use valgrind to ensure there are no memory leaks in your code.
